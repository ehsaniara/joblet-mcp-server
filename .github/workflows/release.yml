name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
    - name: Extract version from tag
      id: version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

        # Check if this is a pre-release (contains alpha, beta, rc, dev)
        if [[ $VERSION =~ (alpha|beta|rc|dev) ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi

        echo "Detected version: $VERSION"
        echo "Is pre-release: ${{ steps.version.outputs.is-prerelease }}"

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.12"]  # Test min and max supported versions

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,sdk]"

    - name: Run all quality checks
      run: pre-commit run --all-files

    - name: Run tests
      run: pytest tests/ -v

  build:
    runs-on: ubuntu-latest
    needs: [validate-tag, test]
    outputs:
      wheel-name: ${{ steps.build.outputs.wheel-name }}
      sdist-name: ${{ steps.build.outputs.sdist-name }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Update version in pyproject.toml
      run: |
        TAG_VERSION="${{ needs.validate-tag.outputs.version }}"
        echo "Updating version to $TAG_VERSION"

        # Update version in pyproject.toml
        sed -i "s/version = \".*\"/version = \"$TAG_VERSION\"/" pyproject.toml

        # Verify the change
        PACKAGE_VERSION=$(grep "^version = " pyproject.toml | cut -d'"' -f2)
        echo "Updated package version: $PACKAGE_VERSION"

        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ Version update failed"
          exit 1
        fi

        echo "✅ Version automatically updated to match tag"

    - name: Build package
      id: build
      run: |
        python -m build

        # Get the names of built files
        WHEEL_NAME=$(ls dist/*.whl | head -n1 | xargs basename)
        SDIST_NAME=$(ls dist/*.tar.gz | head -n1 | xargs basename)

        echo "wheel-name=${WHEEL_NAME}" >> $GITHUB_OUTPUT
        echo "sdist-name=${SDIST_NAME}" >> $GITHUB_OUTPUT

        echo "Built files:"
        ls -la dist/

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [validate-tag, build]
    if: needs.validate-tag.outputs.is-prerelease == 'false'
    environment:
      name: pypi
      url: https://pypi.org/p/joblet-mcp-server
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  publish-test-pypi:
    runs-on: ubuntu-latest
    needs: [validate-tag, build]
    if: needs.validate-tag.outputs.is-prerelease == 'true'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/joblet-mcp-server
    permissions:
      id-token: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true

  create-github-release:
    runs-on: ubuntu-latest
    needs: [validate-tag, build, publish-pypi, publish-test-pypi]
    if: always() && (needs.publish-pypi.result == 'success' || needs.publish-test-pypi.result == 'success')
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ needs.validate-tag.outputs.version }}
        files: |
          dist/*
        prerelease: ${{ needs.validate-tag.outputs.is-prerelease == 'true' }}
        draft: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
