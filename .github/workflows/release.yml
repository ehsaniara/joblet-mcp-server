name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3, etc.

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
    - name: Extract version from tag
      id: version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

        # Check if this is a pre-release (contains alpha, beta, rc, dev)
        if [[ $VERSION =~ (alpha|beta|rc|dev) ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi

        echo "Detected version: $VERSION"
        echo "Is pre-release: ${{ steps.version.outputs.is-prerelease }}"

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,sdk]"

    - name: Verify installation
      run: make verify-install

    - name: Test SDK functionality
      run: |
        # Test that SDK-based server can start with --help
        joblet-mcp-server --help
        # Test that CLI-based server can start with --help
        joblet-mcp-server-cli --help
        # Verify SDK dependencies are available
        python -c "import joblet; print('✓ joblet-sdk-python available')"

    - name: Check code formatting
      run: make format-check

    - name: Run linting
      run: make lint

    - name: Run tests
      run: make test

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security checks
      run: |
        bandit -r joblet_mcp_server/
        safety check

  build:
    runs-on: ubuntu-latest
    needs: [validate-tag, test, security]
    outputs:
      wheel-name: ${{ steps.build.outputs.wheel-name }}
      sdist-name: ${{ steps.build.outputs.sdist-name }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Verify version matches tag
      run: |
        PACKAGE_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        TAG_VERSION="${{ needs.validate-tag.outputs.version }}"

        echo "Package version: $PACKAGE_VERSION"
        echo "Tag version: $TAG_VERSION"

        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ Version mismatch: package.json has $PACKAGE_VERSION but tag is $TAG_VERSION"
          exit 1
        fi

        echo "✅ Version matches tag"

    - name: Build package
      id: build
      run: |
        make build

        # Get the names of built files
        WHEEL_NAME=$(ls dist/*.whl | head -n1 | xargs basename)
        SDIST_NAME=$(ls dist/*.tar.gz | head -n1 | xargs basename)

        echo "wheel-name=${WHEEL_NAME}" >> $GITHUB_OUTPUT
        echo "sdist-name=${SDIST_NAME}" >> $GITHUB_OUTPUT

        echo "Built files:"
        ls -la dist/

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [validate-tag, build]
    if: needs.validate-tag.outputs.is-prerelease == 'false'
    environment:
      name: pypi
      url: https://pypi.org/p/joblet-mcp-server
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  publish-test-pypi:
    runs-on: ubuntu-latest
    needs: [validate-tag, build]
    if: needs.validate-tag.outputs.is-prerelease == 'true'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/joblet-mcp-server
    permissions:
      id-token: write

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true

  create-github-release:
    runs-on: ubuntu-latest
    needs: [validate-tag, build, publish-pypi, publish-test-pypi]
    if: always() && (needs.publish-pypi.result == 'success' || needs.publish-test-pypi.result == 'success')
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Generate release notes
      id: release-notes
      run: |
        VERSION="${{ needs.validate-tag.outputs.version }}"

        # Extract changelog for this version
        if [ -f CHANGELOG.md ]; then
          # Try to extract the section for this version
          awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md

          if [ ! -s release_notes.md ]; then
            echo "No changelog entry found for version $VERSION, using default notes."
            cat > release_notes.md << EOF
        ## Release $VERSION

        This release includes various improvements and bug fixes.

        See the [CHANGELOG.md](CHANGELOG.md) for detailed information about all changes.
        EOF
          fi
        else
          cat > release_notes.md << EOF
        ## Release $VERSION

        This release includes various improvements and bug fixes.
        EOF
        fi

        echo "Release notes:"
        cat release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ needs.validate-tag.outputs.version }}
        body_path: release_notes.md
        files: |
          dist/*
        prerelease: ${{ needs.validate-tag.outputs.is-prerelease == 'true' }}
        draft: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    runs-on: ubuntu-latest
    needs: [validate-tag, create-github-release]
    if: success()
    steps:
    - name: Release notification
      run: |
        VERSION="${{ needs.validate-tag.outputs.version }}"
        IS_PRERELEASE="${{ needs.validate-tag.outputs.is-prerelease }}"

        if [ "$IS_PRERELEASE" = "true" ]; then
          echo "🚀 Pre-release $VERSION published to Test PyPI and GitHub!"
          echo "📦 Install with: pip install -i https://test.pypi.org/simple/ joblet-mcp-server==$VERSION"
        else
          echo "🎉 Release $VERSION published to PyPI and GitHub!"
          echo "📦 Install with: pip install joblet-mcp-server==$VERSION"
        fi

        echo "📋 Release page: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"

  notify-failure:
    runs-on: ubuntu-latest
    needs: [validate-tag, test, security, build, publish-pypi, publish-test-pypi, create-github-release]
    if: failure()
    steps:
    - name: Failure notification
      run: |
        echo "❌ Release workflow failed for version ${{ needs.validate-tag.outputs.version }}"
        echo "Please check the workflow logs for details."
        exit 1