name: Update Dependencies

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      dependency_type:
        description: 'Type of dependencies to update'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - production
        - development

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools

    - name: Check for dependency updates
      id: check-updates
      run: |
        # Create requirements files from pyproject.toml for checking
        pip-compile --generate-hashes --output-file requirements.txt pyproject.toml
        pip-compile --extra dev --generate-hashes --output-file requirements-dev.txt pyproject.toml

        # Check if there are any updates available
        pip-compile --dry-run --generate-hashes --output-file /dev/null pyproject.toml > updates.log 2>&1 || true
        pip-compile --extra dev --dry-run --generate-hashes --output-file /dev/null pyproject.toml >> updates.log 2>&1 || true

        if grep -q "Updating" updates.log; then
          echo "updates-available=true" >> $GITHUB_OUTPUT
          echo "📦 Dependency updates available"
        else
          echo "updates-available=false" >> $GITHUB_OUTPUT
          echo "✅ All dependencies are up to date"
        fi

        # Clean up temporary files
        rm -f requirements.txt requirements-dev.txt updates.log

    - name: Test current dependencies
      if: steps.check-updates.outputs.updates-available == 'true'
      run: |
        pip install -e ".[dev]"
        make verify-install
        make test

    - name: Create Pull Request for dependency updates
      if: steps.check-updates.outputs.updates-available == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update dependencies"
        title: "chore: update dependencies"
        body: |
          ## Dependency Updates

          This PR updates project dependencies to their latest compatible versions.

          ### What's Changed
          - 📦 Updated dependencies in pyproject.toml
          - ✅ Verified all tests pass with updated dependencies
          - 🔍 Automated security and compatibility checks completed

          ### Testing
          - [x] Unit tests pass
          - [x] Integration tests pass
          - [x] Security checks pass

          ### Review Notes
          Please review the dependency changes and ensure they don't introduce any breaking changes.

          ---
          *This PR was automatically created by the dependency update workflow.*
        branch: chore/update-dependencies
        delete-branch: true
        labels: |
          dependencies
          automated

    - name: Summary
      run: |
        UPDATES_AVAILABLE="${{ steps.check-updates.outputs.updates-available }}"

        echo "## Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "$UPDATES_AVAILABLE" = "true" ]; then
          echo "📦 **Status**: Updates available" >> $GITHUB_STEP_SUMMARY
          echo "🔄 **Action**: Pull request created with dependency updates" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **Status**: All dependencies up to date" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Action**: No updates needed" >> $GITHUB_STEP_SUMMARY
        fi

  security-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -e ".[dev]"

    - name: Run security audit
      run: |
        echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Run safety check
        if safety check --json > safety_report.json 2>/dev/null; then
          echo "✅ **Safety Check**: No known security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Safety Check**: Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Vulnerabilities Found:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          safety check >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY

        # Run bandit security linter
        if bandit -r joblet_mcp_server/ -f json > bandit_report.json 2>/dev/null; then
          echo "✅ **Bandit Scan**: No security issues found in code" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Bandit Scan**: Potential security issues found in code" >> $GITHUB_STEP_SUMMARY
        fi